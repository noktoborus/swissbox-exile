package fep;
option optimize_for = SPEED;
/*
 * |a|a|b|b|b|_|
 *  ^   ^__________ payload size
 *  |_________ packet type
 * _ - are reserved
 * all values in BE bytes order
 */


/*
 * Особенности
 Для записи и чтения еденица передачи: чанк
 На любой из запросов к севреру может прийти ответ Pending с тем же id
  Данный ответ является лишь указанием на то, что сервер принял запрос,
  но обработает его позже, следует ждать дальнейших указаний по этому же id

 * Последовательности
 Последовательность авторизации:
 S: ReqAuth
 C: Auth
 S: [Ok|Error|Pending]

 Последовательность инициализации:
 C: ReqInit
 S: ...

 Последовательность записи:
 C: WriteAsk (id = 1000)
 S: WriteOk (id = 1000, session_id = 2344)
 C: xfer (session_id = 2344)
 C: xfer (session_id = 2344)
 ...
 C: End (session_id = 2344)
 C: WriteAsk...
 ...
 C: FileUpdate (id = 1002)
 S: Ok (id = 1002)

 Последовательность чтения:
 C: ReadAsk (id = 2051, session_id = 331)
 S: Ok (id = 2051)
 S: xfer (id = 440, session_id = 331)
 S: xfer (id = 441, session_id = 331)
 ...
 S: End (id = 445, session_id = 331)

 Получение количества чанков:
 C: QueryChunks (id = 100, session_id = 200)
 S: Ok (id = 100)
 S: ResultChunk (id = 101, session_id = 200, chunk_no = 1, chunk_max = 3)
 S: ResultChunk (id = 102, session_id = 200, chunk_no = 2, chunk_max = 3)
 S: ResultChunk (id = 103, session_id = 200, chunk_no = 3, chunk_max = 3)

 Получение списка ревизий
 C: QueryRevisions (id = 107, session_id = 201, depth = 3, offset = 0)
 S: Ok (id = 107)
 S: ResultRevision (id = 108, session_id = 201, rev_no = 1, rev_max = 3)
 S: ResultRevision (id = 109, session_id = 201, rev_no = 2, rev_max = 3)
 S: ResultRevision (id = 110, session_id = 201, rev_no = 3, rev_max = 3)

*/

enum Type {
	tPing = 1;
	tPong = 2;
	tError = 3;
	tOk = 4;
	tPending = 5;
	tReqAuth = 6;
	tAuth = 7;
	txfer = 8;
	tReadAsk = 9;
	tWriteAsk = 10;
	tEnd = 11;
	tWriteOk = 12;
	tFileUpdate = 13;
	tRenameChunk = 14;
	tQueryChunks = 15;
	tResultChunk = 16;
	tQueryRevisions = 17;
	tResultRevision = 18;
	tDirectory = 19;
}

/*

 Время в Ping/Pong указывается от начала эры Unix
 C: Ping
 S: Pong
 клиент указывает в Ping время генерации сообщения,
 а сервер время обработки
*/
message Pong {
	required uint64 id = 1;
	/* время из Ping */
	required uint64 sec = 2;
	required uint32 usec = 3;
	/* время на удалённом пире */
	required uint64 peer_sec = 4;
	required uint64 peer_usec = 5;
}

message Ping {
	required uint64 id = 1;
	/* секунды и микросекунды */
	required uint64 sec = 2;
	required uint32 usec = 3;
}

enum ReqAuthType {
	tHash = 0;
	tUserPassword = 1;
	tUserToken = 2;
	tKey = 3;
}

/* предложение сервера авторизироваться:
 * ожидаемые ответы: Auth */
message ReqAuth {
	required uint64 id = 1;
	/* информационный текст для пользователя */
	optional string text = 5;
}

/* запрос клиента авторизации
 * ожидаемые ответы: Ok, Error,
 * Pending: информационное сообщение, авторизация принята,
 * 		но проверку выполнить прямо сейчас не получится
 */
message Auth {
	required uint64 id = 1;
	required string domain = 2;
	/* поля для авторизации, только хеш, юзер/пароль, ключ */
	optional string authToken = 4;
	optional string username = 5;
	optional string password = 6;
	optional bytes key = 7;
	required ReqAuthType authType = 8;
}

/* общие ответы
	в поле requestType указывается тип сообщения
	на которое генерируется ответ
 */
message Error {
	required uint64 id = 1 [default = 0];
	optional string message = 3;
	/* количество оставшихся попыток до применения санкций
	   полезно, к примеру, для Auth
	   Если указан 0, то продолжение работы невозможно
	   в остальных случаях или используется счётчик или поле не указывается
	 */
	optional uint32 remain = 4;
}

message Ok {
	required uint64 id = 1;
}

/* подобный запрос уже выполняется
 или используется в качестве альтернативы пингу сервером к клиенту
 указывает на то, что запрос принят к обработке,
 но быть выполненым сейчас не может, дальнейшие распоряжения прийдут позже
 */
message Pending {
	required uint64 id = 1 [default = 0];
	/* стринги отладки */
	optional string debug = 999;
}

/* отмена операции */
message Cancel {
	required uint64 id = 1 [default = 0];
	optional string message = 2;
}

/*
	Обновление меты файла, хеши имени,
*/
message FileMeta {
	required uint64 id = 1 [default = 0];

	/* идентификация файла по трём полям */
	required string rootdir_guid = 3;
	required string file_guid = 4;
	required string revision_guid = 5;

	/* опциональные значения
	 если обновляется только одно поле из (enc_filename, hash_filename)
	 возвращается Error
	 */
	optional string enc_filename = 50;
	optional string hash_filename = 51;
	optional string directory_guid = 53;
}


/* обновление файла
 присылается сервером клиенту или клиентом серверу в случае обновления
 ревизии файла
 Ответы:
	Ok: Всё нормально, можно продолжать
	Error: отмена
 */
message FileUpdate {
	required uint64 id = 1 [default = 0];

	required string rootdir_guid = 3;
	required string file_guid = 4;
	required string revision_guid = 5;
	/* может быть пустым если файл новый */
	optional string parent_revision_guid = 6;
	/* новое количество чанков в файле
	   при удалении отсылается значение = 0 */
	required uint32 chunks = 10;
	/* дополнительные поля */
	optional string enc_filename = 50;
	optional string hash_filename = 51;
	optional bytes key = 52;
	optional string directory_guid = 53;
}

/*
 * Запрос разрешения на запись
 * ответы:
 *  Error: неудача
 *  WriteOk: запись разрешена
*/
message WriteAsk {
	required uint64 id = 1 [default = 0];
	/* требуемое пространство в байтах для сохранения,
		пространство резервируется и идентификатор резервации указывается
		в поле session_id в ответе WriteOk
	*/
	required uint64 size = 2;
	/* название рутдиры */
	required string rootdir_guid = 3;
	required string file_guid = 5;
	required string chunk_guid = 6;
	required string revision_guid = 7;
	/* sha256 хеш чанка */
	required bytes chunk_hash = 10;
}

message WriteOk {
	required uint64 id = 1 [default = 0];

	/*
		Номер сессии, внутри которой передаются куски чанка
		этот id используется в сообщении xfer, для того, что бы можно
		было передавать несколько файлов одновременно
	*/
	required uint32 session_id = 2;

}

/* Ответ сервера на запрос записи:
 Ответы: Ok, Error
*/
message End {
	required uint64 id = 1 [default = 0];
	/* важное поле: идентификатор запрошенного пространства
	   при запросе записи резервируется пространство
	   и этот идентификатор нужен для последующей записи в это пространство
	   */
	required uint32 session_id = 2;
	/* смещение чанка в файле */
	required uint32 offset = 3;
	/* настоящая длина (расшифрованных) данных в чанке
	 для костылинга
	 */
	required uint64 origin_len = 4;
}

/* 
 	Передача куска чанка.
	Если ошибок во время записи не произошло, подтверждение не отсылается.
	Иначе возвращается Error
 */
message xfer {
	required uint64 id = 1 [default = 0];
	/* идентификатор сессии передачи */
	required uint32 session_id = 2;
	/* смещение в чанке */
	required uint64 offset = 4;
	required bytes data = 6;
}

/* чтение */

/*
 запрос на чтение,
 возможные ответы:
 Error: невозможно начать передау
 Write: передача
*/
message ReadAsk {
	required uint64 id = 1 [default = 0];
	/* аналогично записи, резервируемая область у клиента */
	required uint32 session_id = 2;

	required string rootdir_guid = 3;
	required string file_guid = 4;
	required string chunk_guid = 5;
}

message QueryRevisions {
	required uint64 id = 1 [default = 0];

	required uint32 session_id = 2;

	required string rootdir_guid = 3;
	required string file_guid = 4;

	required uint32 depth = 5 [default = 3];
}

message ResultRevision {
	required uint64 id = 1 [default = 0];

	required uint32 session_id = 2;

	required string revision_guid = 3;
	optional string parent_revision_guid = 4;
	/* аналог к ResultChunk.chunk_no/ResultChunk.chunk_max */
	required uint32 rev_no = 5;
	required uint32 rev_max = 6;
}

/* запрос чанков для ревизии revision_guid */
message QueryChunks {
	required uint64 id = 1 [default = 1];

	required uint32 session_id = 2;

	required string rootdir_guid = 3;
	required string file_guid = 4;
	required string revision_guid = 5;
}

/* ответ на QueryChunks */
message ResultChunk {
	required uint64 id = 1 [default = 1];

	required uint32 session_id = 2;

	required string chunk_guid = 5;
	/* общее количество подобных сообщений и номер текущего сообщения  */
	required uint32 chunk_no = 7;
	required uint32 chunk_max = 8;
	
	required bytes chunk_hash = 10;
}

/* используется для переноса чанка из другой ревизии в указанную */
message RenameChunk {
	required uint64 id = 1 [default = 0];
	required string rootdir_guid = 2;
	required string file_guid = 3;
	required string chunk_guid = 4;
	/* целевой гуид */
	required string to_chunk_guid = 5; 
	required string to_revision_guid = 6;
}

/* извещения
 * Извещения отправляются сервером клиенту
 * в случае отсутсвия поля id ответ не требуется
 */

/*
	сообщение о озменениях в структуре каталогов
 */
message Directory {
	required uint64_t id = 1;
	required string rootdir_guid = 2;
	/* гуид директории */
	required string guid = 3;

	/* путь директории
	 имя указывается или для новых директорий или для переименования
	 */
	optional string path = 4;
	/* флаг на удаление, с этим флагом заполнять path не обязательно */
	optional bool drop = 5;
}

/* TODO:
   3. добавить обратку коллизий
   2. нотификация
   1. Мета (директории, хеши, всё такое)
 */

/*
TODO: добавить сообщение нотификации отдельных файлов
*/
